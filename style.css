/*!
Theme Name: _rj
Theme URI: http://underscores.me/
Author: julien rondeau
Author URI: http://www.julienrondeau.fr
Description: Description
Version: 1.5.0
License: GNU General Public License v2 or later
License URI: http://www.gnu.org/licenses/gpl-2.0.html
Text Domain: _rj
Tags: responsive-layout, sass, gulp, susy, breakpoint, wordpress

This theme, like WordPress, is licensed under the GPL.
Use it to make something cool, have fun, and share what you've learned with others.

_rj is based on Underscores http://underscores.me/, (C) 2012-2015 Automattic, Inc.
Underscores is distributed under the terms of the GNU GPL v2 or later.

_rj is structured with SASS (http://sass-lang.com/) with a 7-1 architecture, is using Susy (http://susy.oddbird.net/) as grid system, Breakpoint (https://github.com/at-import/breakpoint) to manage the media queries and Gulp (http://gulpjs.com/) to automate the workflow.

Normalizing styles have been helped along thanks to the fine work of
Nicolas Gallagher and Jonathan Neal http://necolas.github.com/normalize.css/
*/
/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/**
 * Remove default margin.
 */
body {
  margin: 0;
}

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block;
}

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none;
}

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent;
}

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active,
a:hover {
  outline: 0;
}

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold;
}

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic;
}

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0;
}

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden;
}

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px;
}

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0;
}

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto;
}

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */
}

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
}

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default;
}

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal;
}

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */
}

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto;
}

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold;
}

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

td,
th {
  padding: 0;
}

/* 
 *  Owl Carousel - Animate Plugin
 */
.owl-carousel .animated {
  -webkit-animation-duration: 1000ms;
  animation-duration: 1000ms;
  -webkit-animation-fill-mode: both;
  animation-fill-mode: both;
}

.owl-carousel .owl-animated-in {
  z-index: 0;
}

.owl-carousel .owl-animated-out {
  z-index: 1;
}

.owl-carousel .fadeOut {
  -webkit-animation-name: fadeOut;
  animation-name: fadeOut;
}

@-webkit-keyframes fadeOut {
  0% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}

@keyframes fadeOut {
  0% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}

/* 
 * 	Owl Carousel - Auto Height Plugin
 */
.owl-height {
  -webkit-transition: height 500ms ease-in-out;
  transition: height 500ms ease-in-out;
}

/* 
 *  Core Owl Carousel CSS File
 */
.owl-carousel {
  display: none;
  width: 100%;
  -webkit-tap-highlight-color: transparent;
  /* position relative and z-index fix webkit rendering fonts issue */
  position: relative;
  z-index: 1;
}

.owl-carousel .owl-stage {
  position: relative;
  -ms-touch-action: pan-Y;
}

.owl-carousel .owl-stage:after {
  content: ".";
  display: block;
  clear: both;
  visibility: hidden;
  line-height: 0;
  height: 0;
}

.owl-carousel .owl-stage-outer {
  position: relative;
  overflow: hidden;
  /* fix for flashing background */
  -webkit-transform: translate3d(0px, 0px, 0px);
}

.owl-carousel .owl-controls .owl-nav .owl-prev,
.owl-carousel .owl-controls .owl-nav .owl-next,
.owl-carousel .owl-controls .owl-dot {
  cursor: pointer;
  cursor: hand;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.owl-carousel.owl-loaded {
  display: block;
}

.owl-carousel.owl-loading {
  opacity: 0;
  display: block;
}

.owl-carousel.owl-hidden {
  opacity: 0;
}

.owl-carousel .owl-refresh .owl-item {
  display: none;
}

.owl-carousel .owl-item {
  position: relative;
  min-height: 1px;
  float: left;
  -webkit-backface-visibility: hidden;
  -webkit-tap-highlight-color: transparent;
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.owl-carousel .owl-item img {
  display: block;
  width: 100%;
  -webkit-transform-style: preserve-3d;
}

.owl-carousel.owl-text-select-on .owl-item {
  -webkit-user-select: auto;
  -moz-user-select: auto;
  -ms-user-select: auto;
  user-select: auto;
}

.owl-carousel .owl-grab {
  cursor: move;
  cursor: -webkit-grab;
  cursor: -o-grab;
  cursor: -ms-grab;
  cursor: grab;
}

.owl-carousel.owl-rtl {
  direction: rtl;
}

.owl-carousel.owl-rtl .owl-item {
  float: right;
}

/* No Js */
.no-js .owl-carousel {
  display: block;
}

/* 
 * 	Owl Carousel - Lazy Load Plugin
 */
.owl-carousel .owl-item .owl-lazy {
  opacity: 0;
  -webkit-transition: opacity 400ms ease;
  transition: opacity 400ms ease;
}

.owl-carousel .owl-item img {
  -webkit-transform-style: preserve-3d;
          transform-style: preserve-3d;
}

/* 
 * 	Owl Carousel - Video Plugin
 */
.owl-carousel .owl-video-wrapper {
  position: relative;
  height: 100%;
  background: #000;
}

.owl-carousel .owl-video-play-icon {
  position: absolute;
  height: 80px;
  width: 80px;
  left: 50%;
  top: 50%;
  margin-left: -40px;
  margin-top: -40px;
  background: url("owl.video.play.png") no-repeat;
  cursor: pointer;
  z-index: 1;
  -webkit-backface-visibility: hidden;
  -webkit-transition: scale 100ms ease;
  transition: scale 100ms ease;
}

.owl-carousel .owl-video-play-icon:hover {
  -webkit-transition: scale(1.3, 1.3);
  transition: scale(1.3, 1.3);
}

.owl-carousel .owl-video-playing .owl-video-tn,
.owl-carousel .owl-video-playing .owl-video-play-icon {
  display: none;
}

.owl-carousel .owl-video-tn {
  opacity: 0;
  height: 100%;
  background-position: center center;
  background-repeat: no-repeat;
  background-size: contain;
  -webkit-transition: opacity 400ms ease;
  transition: opacity 400ms ease;
}

.owl-carousel .owl-video-frame {
  position: relative;
  z-index: 1;
}

/**
 * px to em conversion
 * @link http://www.pjmccormick.com/sweet-sass-function-convert-px-em
 * @requires {variable} $base-font-size
 * @param {number} $target - size to convert
 * @param {number} $context ($base-font-size) - context conversion is based on
 * @example scss
 * .foobar { padding-bottom: em(30); }
 * @returns {number}
 */
/**
 * px to rem
 * @link http://www.pjmccormick.com/sweet-sass-function-convert-px-em
 * @requires {variable} $base-font-size
 * @param {number} $target - size to convert
 * @param {number} $context ($base-font-size) - context conversion is based on
 * @example scss
 * .foobar { padding-bottom: rem(30); }
 * @returns {number}
 */
/**
 * em to px conversion
 * @link http://www.pjmccormick.com/sweet-sass-function-convert-px-em
 * @requires {variable} $base-font-size
 * @param {number} $target - size to convert
 * @param {number} $context ($base-font-size) - context conversion is based on
 * @example scss
 * .foobar { padding-bottom: px(30); }
 * @returns {number}
 */
/**
 * Buttons
 * This customises your buttons with a different background color and text color.
 * If no text color is specified it will default to white.
 * @param {String} $color-background - background color
 * @param {String} $color-text (#fff) - text color
 * @example scss
 * .foobar { @include btn(#f37) { ... } }
 */
/**
 * Retina Displays
 * @param {String} $image - image url
 * @param {String} $width - image width
 * @param {String} $height - image height
 * @example scss
 * .foobar { @include image-2x('img/logo.png', 200px, 300px) { ... } }
 */
/* Text meant only for screen readers. */
/**
 * Clear inner floats
 */
.clearfix::after {
  clear: both;
  content: '';
  display: table;
}

/**
 * Hide element while making it readable for screen readers
 * Shamelessly borrowed from HTML5Boilerplate:
 * https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css#L119-L133
 */
.visually-hidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

.z-index-1 {
  z-index: 10 !important;
}

.z-index-0 {
  z-index: -1;
}

.sticky-footer {
  position: absolute;
  bottom: 0;
}

/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
.site-header {
  background: #fff;
  height: 100px;
  position: fixed;
  z-index: 10;
  right: 0;
  left: 0;
  top: 0;
}

.site-branding {
  display: inline-block;
}

.site-branding a {
  color: #000;
}

.site-branding img {
  top: 50%;
  bottom: auto;
  -webkit-transform: translateY(-50%);
          transform: translateY(-50%);
  position: absolute;
  left: 20px;
}

.site-title {
  clip: rect(1px, 1px, 1px, 1px);
  position: absolute !important;
  height: 1px;
  width: 1px;
  overflow: hidden;
}

.site-title:focus {
  background-color: #fff;
  border-radius: 3px;
  box-shadow: 0 0 2px 2px rgba(0, 0, 0, 0.6);
  clip: auto !important;
  color: #144259;
  display: block;
  font-weight: bold;
  height: auto;
  left: 5px;
  line-height: normal;
  padding: 15px 23px 14px;
  text-decoration: none;
  top: 5px;
  width: auto;
  z-index: 100000;
  /* Above WP toolbar. */
}

.site-main {
  max-width: 1180px;
  margin-left: auto;
  margin-right: auto;
  margin: 0 1.25em;
}

.site-main:before, .site-main:after {
  content: "";
  display: table;
}

.site-main:after {
  clear: both;
}

.site-main:after {
  content: " ";
  display: block;
  clear: both;
}

@media all and (min-width: 48em) {
  .site-main {
    margin: 0 auto;
  }
}

@media all and (min-width: 48em) {
  #primary {
    width: 65.78171%;
    float: left;
    margin-right: 2.65487%;
    padding: 1% 5%;
  }
}

#primary.full-width {
  clear: both;
  width: 100%;
  float: left;
  margin-left: 0;
  margin-right: 0;
}

#secondary {
  margin-top: 1.25em;
}

@media all and (min-width: 48em) {
  #secondary {
    width: 31.56342%;
    float: right;
    margin-right: 0;
    padding: 1% 5%;
    margin-top: 0;
  }
}

.site-footer {
  clear: both;
  width: 100%;
  float: left;
  margin-left: 0;
  margin-right: 0;
  background: #fff;
  text-align: center;
  padding: 1% 0;
}

/**
 * Set up a decent box model on the root element
 */
html {
  box-sizing: border-box;
  font-size: 16px;
  line-height: 1.4;
}

body {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background: #fff;
  padding-top: 100px;
}

body:before, body:after {
  content: "";
  display: table;
}

body:after {
  clear: both;
}

/**
 * Make all elements from the DOM inherit from the parent box-sizing
 * Since `*` has a specificity of 0, it does not override the `html` value
 * making all elements inheriting from the root box-sizing value
 * See: https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/
 */
*,
*::before,
*::after {
  box-sizing: inherit;
}

blockquote,
q {
  quotes: "" "";
}

blockquote:before, blockquote:after,
q:before,
q:after {
  content: "";
}

hr {
  background-color: #144259;
  border: 0;
  height: 1px;
  margin-bottom: 1.5em;
}

img {
  height: auto;
  /* Make sure images are scaled correctly. */
  max-width: 100%;
  /* Adhere to container width. */
}

/**
 * Basic typography style for copy text
 */
body,
button,
input,
select,
textarea {
  font-size: 1rem;
  line-height: 1.4;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-family: "Roboto", sans-serif;
  color: rgba(0, 0, 0, 0.9);
  font-weight: 400;
}

p {
  margin-top: 10px;
  margin-bottom: 1em;
}

dfn,
cite,
em,
i {
  font-style: italic;
}

blockquote {
  margin: 0 1.5em;
}

address {
  margin: 0 0 1.5em;
}

pre {
  line-height: 1.6;
  background: #144259;
  font-family: "Courier 10 Pitch", Courier, monospace;
  margin-bottom: 1.6em;
  max-width: 100%;
  overflow: auto;
  padding: 1.6em;
}

code,
kbd,
tt,
var {
  font-family: Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;
}

abbr,
acronym {
  border-bottom: 1px dotted #000;
  cursor: help;
}

mark,
ins {
  background: #144259;
  text-decoration: none;
}

big {
  font-size: 125%;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  clear: both;
}

/***** Headings ******/
h1,
.h1 {
  font-size: 1.125rem;
  margin: 5%;
}

@media screen and (min-width: 568px) {
  h1,
  .h1 {
    font-size: 2.1875rem;
  }
}

@media screen and (min-width: 768px) {
  h1,
  .h1 {
    font-size: 3.15731rem;
    line-height: 1;
  }
}

h2,
.h2 {
  font-size: 1.125rem;
  line-height: 1;
}

@media screen and (min-width: 568px) {
  h2,
  .h2 {
    font-size: 2.36856rem;
    line-height: 1.3;
  }
}

h3,
.h3 {
  font-size: 1.25rem;
  line-height: 1.3;
}

@media screen and (min-width: 568px) {
  h3,
  .h3 {
    font-size: 1.77687rem;
  }
}

h4,
.h4 {
  font-size: 1rem;
}

@media screen and (min-width: 1024px) {
  h4,
  .h4 {
    font-size: 1.333rem;
    line-height: 1;
  }
}

h5,
.h5 {
  font-size: 0.75rem;
}

@media screen and (min-width: 568px) {
  h5,
  .h5 {
    font-size: 1.375rem;
  }
}

@media screen and (min-width: 768px) {
  h5,
  .h5 {
    font-size: 1.125rem;
    line-height: 1;
  }
}

/* Text meant only for screen readers. */
.screen-reader-text {
  clip: rect(1px, 1px, 1px, 1px);
  position: absolute;
  height: 1px;
  width: 1px;
  overflow: hidden;
}

.screen-reader-text:focus {
  background-color: #fff;
  border-radius: 3px;
  box-shadow: 0 0 2px 2px rgba(0, 0, 0, 0.6);
  clip: auto;
  color: #144259;
  display: block;
  font-weight: bold;
  height: auto;
  left: 5px;
  line-height: normal;
  padding: 15px 23px 14px;
  text-decoration: none;
  top: 5px;
  width: auto;
  z-index: 100000;
  /* Above WP toolbar. */
}

/*
* Animations styles 
*/
.headroom {
  -webkit-transition: -webkit-transform 200ms linear;
  transition: -webkit-transform 200ms linear;
  transition: transform 200ms linear;
  transition: transform 200ms linear, -webkit-transform 200ms linear;
}

.slideDown {
  -webkit-transform: translateY(0%);
          transform: translateY(0%);
}

.slideUp {
  -webkit-transform: translateY(-150%);
          transform: translateY(-150%);
}

@-webkit-keyframes slide-in {
  0% {
    opacity: 0;
    -webkit-transform: translateX(80px);
            transform: translateX(80px);
  }
  100% {
    opacity: 1;
    -webkit-transform: translateX(0);
            transform: translateX(0);
  }
}

@keyframes slide-in {
  0% {
    opacity: 0;
    -webkit-transform: translateX(80px);
            transform: translateX(80px);
  }
  100% {
    opacity: 1;
    -webkit-transform: translateX(0);
            transform: translateX(0);
  }
}

.blog .format-aside .entry-title,
.archive .format-aside .entry-title {
  display: none;
}

/*
* Partial for the Breadcrumb
*/
.breadcrumbs {
  font-size: 0.75rem;
  margin-top: 15px;
  margin-left: 5%;
  margin-right: 5%;
  font-weight: 400;
}

@media screen and (min-width: 768px) {
  .breadcrumbs {
    font-size: 1rem;
  }
}

.breadcrumbs a {
  text-decoration: none;
  color: #144259;
  font-weight: 400;
}

.breadcrumbs span:nth-of-type(2),
.breadcrumbs span:nth-of-type(3) {
  font-weight: 700;
}

@media all and (min-width: 48em) {
  .breadcrumbs {
    margin-left: 0;
    margin-right: 0;
    margin-top: 30px;
  }
}

@media all and (min-width: 75em) {
  .breadcrumbs {
    margin-top: 50px;
  }
}

button,
input[type="button"],
input[type="reset"] {
  background-color: #ccc;
  /*border-color: darken($color-border, 6%);*/
  color: #fff;
  text-transform: uppercase;
  font-weight: 800;
  line-height: 1;
  border: 0;
  padding: 0;
  width: 125px;
  height: 30px;
  text-align: center;
}

.owl-carousel .owl-item {
  float: none;
  display: table-cell;
  vertical-align: middle;
}

.clear:before, .clear:after,
.entry-content:before,
.entry-content:after,
.comment-content:before,
.comment-content:after,
.site-header:before,
.site-header:after,
.site-content:before,
.site-content:after,
.site-footer:before,
.site-footer:after {
  content: "";
  display: table;
}

.clear:after,
.entry-content:after,
.comment-content:after,
.site-header:after,
.site-content:after,
.site-footer:after {
  clear: both;
}

.comment-content a {
  word-wrap: break-word;
}

.bypostauthor {
  display: block;
}

input[type="text"],
input[type="email"],
input[type="url"],
input[type="tel"],
input[type="password"],
textarea {
  color: #000;
  border: 1px solid #ccc;
  border-radius: 0;
  height: 35px;
  width: 100%;
  padding: 3px;
}

input[type="text"]:focus,
input[type="email"]:focus,
input[type="url"]:focus,
input[type="tel"]:focus,
input[type="password"]:focus,
textarea:focus {
  outline: none;
}

input[type="text"].placeholder,
input[type="email"].placeholder,
input[type="url"].placeholder,
input[type="tel"].placeholder,
input[type="password"].placeholder,
textarea.placeholder {
  color: #000;
}

input[type="text"]:-moz-placeholder,
input[type="email"]:-moz-placeholder,
input[type="url"]:-moz-placeholder,
input[type="tel"]:-moz-placeholder,
input[type="password"]:-moz-placeholder,
textarea:-moz-placeholder {
  color: #000;
}

input[type="text"]::-moz-placeholder,
input[type="email"]::-moz-placeholder,
input[type="url"]::-moz-placeholder,
input[type="tel"]::-moz-placeholder,
input[type="password"]::-moz-placeholder,
textarea::-moz-placeholder {
  color: #000;
}

input[type="text"]:-ms-input-placeholder,
input[type="email"]:-ms-input-placeholder,
input[type="url"]:-ms-input-placeholder,
input[type="tel"]:-ms-input-placeholder,
input[type="password"]:-ms-input-placeholder,
textarea:-ms-input-placeholder {
  color: #000;
}

input[type="text"]::-webkit-input-placeholder,
input[type="email"]::-webkit-input-placeholder,
input[type="url"]::-webkit-input-placeholder,
input[type="tel"]::-webkit-input-placeholder,
input[type="password"]::-webkit-input-placeholder,
textarea::-webkit-input-placeholder {
  color: #000;
}

label {
  width: 20%;
  font-style: italic;
  display: inline-block;
}

/* Globally hidden elements when Infinite Scroll is supported and in use. */
.infinite-scroll .posts-navigation,
.infinite-scroll.neverending .site-footer {
  /* Theme Footer (when set to scrolling) */
  display: none;
}

/* When Infinite Scroll has reached its end we need to re-display elements that were hidden (via .neverending) before. */
.infinity-end.neverending .site-footer {
  display: block;
}

.ias-trigger-next,
.ias-spinner,
.ias-noneleft {
  left: 50%;
  right: auto;
  -webkit-transform: translateX(-50%);
          transform: translateX(-50%);
  position: absolute;
  bottom: 0;
  width: 100%;
}

.ias-trigger-next a {
  color: rgba(0, 0, 0, 0.6);
  text-decoration: underline;
}

@media all and (min-width: 75em) {
  .ias-trigger-next {
    bottom: 30px;
  }
}

.ias-noneleft {
  color: #144259;
}

@media all and (min-width: 75em) {
  .ias-noneleft {
    bottom: 30px;
  }
}

a {
  color: #000;
  text-decoration: none;
  -webkit-transition: color 0.3s ease;
  transition: color 0.3s ease;
}

a:focus {
  outline: thin dotted;
}

a:hover, a:active {
  outline: 0;
}

ul,
ol,
li {
  list-style: none;
  margin: 0;
  padding: 0;
}

ul {
  list-style: none;
}

ol {
  list-style: decimal;
}

li {
  position: relative;
}

li > ul,
li > ol {
  margin-bottom: 0;
  margin-left: 1.5em;
}

dt {
  font-weight: bold;
}

dd {
  margin: 0 1.5em 1.5em;
}

.site-main ol,
.site-main ul ul {
  margin-bottom: 0;
}

.page-content .wp-smiley,
.entry-content .wp-smiley,
.comment-content .wp-smiley {
  border: 0;
  margin-bottom: 0;
  margin-top: 0;
  padding: 0;
}

/* Make sure embeds and iframes fit their containers. */
embed,
iframe,
object {
  max-width: 100%;
}

.wp-caption {
  margin-bottom: 1.5em;
  max-width: 100%;
}

.wp-caption img[class*="wp-image-"] {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

.wp-caption .wp-caption-text {
  margin: 0.8075em 0;
}

.wp-caption-text {
  text-align: center;
}

.main-navigation {
  background: #fff;
  width: 100%;
  height: 100vh;
  max-height: 100vh;
  overflow: auto;
  position: fixed;
  top: 0;
  right: 0;
  margin: 0;
  z-index: 9;
  opacity: 1;
  display: block;
  overflow-y: auto;
  -webkit-transform: translateZ(0) translateX(100%);
          transform: translateZ(0) translateX(100%);
  -webkit-transition: -webkit-transform 0.3s cubic-bezier(0.07, 0.23, 0.34, 1);
  transition: -webkit-transform 0.3s cubic-bezier(0.07, 0.23, 0.34, 1);
  transition: transform 0.3s cubic-bezier(0.07, 0.23, 0.34, 1);
  transition: transform 0.3s cubic-bezier(0.07, 0.23, 0.34, 1), -webkit-transform 0.3s cubic-bezier(0.07, 0.23, 0.34, 1);
}

.main-navigation a {
  display: block;
  text-decoration: none;
  color: #000;
  text-transform: uppercase;
  font-weight: 800;
  -webkit-transform: translateZ(0);
          transform: translateZ(0);
  -webkit-transition: color 0.3s ease;
  transition: color 0.3s ease;
}

@media all and (min-width: 48em) {
  .main-navigation {
    width: 50%;
  }
}

@media all and (min-width: 64em) {
  .main-navigation {
    top: 50%;
    bottom: auto;
    -webkit-transform: translateY(-50%);
            transform: translateY(-50%);
    position: absolute;
    width: auto;
    height: auto;
  }
}

.main-navigation .menu {
  display: block;
  list-style: none;
  margin: 50px 0 0;
  width: 100%;
  text-align: center;
}

.main-navigation .menu:before, .main-navigation .menu:after {
  content: "";
  display: table;
}

.main-navigation .menu:after {
  clear: both;
}

@media all and (min-width: 64em) {
  .main-navigation .menu {
    width: auto;
    margin: 0;
  }
}

.main-navigation .menu li {
  margin-left: 10px;
  margin-right: 25px;
  font-size: 16px;
  font-size: 1rem;
  float: none;
  position: relative;
  padding: 10px 0;
  -webkit-transition: opacity 0.5s ease;
  transition: opacity 0.5s ease;
}

.nav-open .main-navigation {
  -webkit-transform: translateZ(0) translateX(0%);
          transform: translateZ(0) translateX(0%);
}

.nav-open .main-navigation li a {
  -webkit-animation: slide-in 0.3s 0.3s backwards;
          animation: slide-in 0.3s 0.3s backwards;
}

.nav-open .main-navigation li:nth-of-type(2) a {
  -webkit-animation-delay: 0.4s;
          animation-delay: 0.4s;
}

.nav-open .main-navigation li:nth-of-type(3) a {
  -webkit-animation-delay: 0.5s;
          animation-delay: 0.5s;
}

.nav-open .main-navigation li:nth-of-type(4) a {
  -webkit-animation-delay: 0.6s;
          animation-delay: 0.6s;
}

.nav-open .main-navigation li:nth-of-type(5) a {
  -webkit-animation-delay: 0.7s;
          animation-delay: 0.7s;
}

.nav-open .main-navigation li:nth-of-type(6) a {
  -webkit-animation-delay: 0.8s;
          animation-delay: 0.8s;
}

.nav-open .main-navigation li:nth-of-type(7) a {
  -webkit-animation-delay: 0.9s;
          animation-delay: 0.9s;
}

.nav-open .main-navigation li:nth-of-type(8) a {
  -webkit-animation-delay: 0.10s;
          animation-delay: 0.10s;
}

.nav-open .main-navigation li:nth-of-type(9) a {
  -webkit-animation-delay: 0.11s;
          animation-delay: 0.11s;
}

.nav-open .main-navigation li:nth-of-type(10) a {
  -webkit-animation-delay: 0.12s;
          animation-delay: 0.12s;
}

@media all and (min-width: 64em) {
  .nav-open .main-navigation {
    width: 35%;
    -webkit-transform: translateX(0);
            transform: translateX(0);
  }
}

/*
* Mobile Nav Trigger
*/
.nav-trigger {
  top: 50%;
  bottom: auto;
  -webkit-transform: translateY(-50%);
          transform: translateY(-50%);
  background: #000;
  position: absolute;
  z-index: 2;
  right: 30px;
  width: 32px;
  height: 32px;
  overflow: hidden;
  color: transparent;
  white-space: nowrap;
  text-indent: 100%;
  border-radius: 50%;
  z-index: 10;
  -webkit-transition: all 0.3s ease;
  transition: all 0.3s ease;
}

.nav-trigger:hover, .nav-trigger:active, .nav-trigger:focus {
  background: transparent;
  border: 1px solid #000;
}

.nav-trigger:hover span,
.nav-trigger:hover span::before,
.nav-trigger:hover span::after, .nav-trigger:active span,
.nav-trigger:active span::before,
.nav-trigger:active span::after, .nav-trigger:focus span,
.nav-trigger:focus span::before,
.nav-trigger:focus span::after {
  background: #000;
}

.nav-open .nav-trigger {
  background: transparent;
  border: 1px solid #000;
}

@media all and (min-width: 64em) {
  .nav-trigger {
    display: none;
  }
}

.nav-trigger span,
.nav-trigger span::before,
.nav-trigger span::after {
  position: absolute;
  width: 16px;
  height: 3px;
  background: #fff;
}

.nav-trigger span::before,
.nav-trigger span::after {
  -webkit-transition: -webkit-transform .3s ease;
  transition: -webkit-transform .3s ease;
  transition: transform .3s ease;
  transition: transform .3s ease, -webkit-transform .3s ease;
}

.nav-trigger span {
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%, -50%);
          transform: translate(-50%, -50%);
}

.nav-trigger span::before,
.nav-trigger span::after {
  content: '';
  top: 0;
  left: 0;
}

.nav-trigger span::before {
  -webkit-transform: translateY(-5px);
          transform: translateY(-5px);
}

.nav-trigger span::after {
  -webkit-transform: translateY(5px);
          transform: translateY(5px);
}

.nav-open .nav-trigger span {
  background: transparent;
}

.nav-open .nav-trigger span::before,
.nav-open .nav-trigger span::after {
  background: #000;
}

.nav-open .nav-trigger span::before {
  -webkit-transform: rotate(-45deg);
          transform: rotate(-45deg);
}

.nav-open .nav-trigger span::after {
  -webkit-transform: rotate(45deg);
          transform: rotate(45deg);
}

/*
* content navigations
*/
.site-main .comment-navigation, .site-main
.posts-navigation, .site-main
.post-navigation, .site-main
.custom-post-navigation {
  margin: 0 0 1.5em;
  overflow: hidden;
}

.comment-navigation .nav-previous,
.comment-navigation .nav-next,
.posts-navigation .nav-previous,
.posts-navigation .nav-next,
.post-navigation .nav-previous,
.post-navigation .nav-next,
.custom-post-navigation .nav-previous,
.custom-post-navigation .nav-next {
  padding: 15px;
}

.comment-navigation .nav-previous,
.posts-navigation .nav-previous,
.post-navigation .nav-previous,
.custom-post-navigation .nav-previous {
  float: left;
  width: 50%;
}

.comment-navigation .nav-next,
.posts-navigation .nav-next,
.post-navigation .nav-next,
.custom-post-navigation .nav-next {
  float: right;
  text-align: right;
  width: 50%;
  position: relative;
}

.comment-navigation .nav-next:before,
.posts-navigation .nav-next:before,
.post-navigation .nav-next:before,
.custom-post-navigation .nav-next:before {
  content: '';
  display: block;
  position: absolute;
  left: 0;
  top: 0;
  width: 1px;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.2);
}

.single .comment-navigation, .single
.posts-navigation, .single
.post-navigation, .single
.custom-post-navigation {
  display: block !important;
  margin-top: 7.9646%;
  margin-bottom: 0;
  background: #e4edf2;
}

.single .comment-navigation:nth-of-type(2), .single
.posts-navigation:nth-of-type(2), .single
.post-navigation:nth-of-type(2), .single
.custom-post-navigation:nth-of-type(2) {
  margin-top: 0;
}

.post-navigation a {
  font-weight: 700;
}

.custom-post-navigation .nav-previous,
.custom-post-navigation .nav-next {
  padding: 5px 15px;
  border-bottom: 1px solid rgba(0, 0, 0, 0.2);
}

.custom-post-navigation .nav-previous a,
.custom-post-navigation .nav-next a {
  color: rgba(0, 0, 0, 0.6);
  text-transform: uppercase;
}

.custom-post-navigation .nav-previous a:hover, .custom-post-navigation .nav-previous a:active, .custom-post-navigation .nav-previous a:focus,
.custom-post-navigation .nav-next a:hover,
.custom-post-navigation .nav-next a:active,
.custom-post-navigation .nav-next a:focus {
  color: #144259;
}

.custom-post-navigation .nav-previous .fa-lg,
.custom-post-navigation .nav-next .fa-lg {
  vertical-align: -5%;
}

.custom-post-navigation .nav-previous .fa-lg {
  margin-right: 5px;
}

.custom-post-navigation .nav-next .fa-lg {
  margin-left: 5px;
}

.sticky {
  display: block;
}

.byline,
.updated:not(.published) {
  display: none;
}

.single .byline,
.group-blog .byline {
  display: inline;
}

.page-content,
.entry-content,
.entry-summary {
  margin: 0;
}

.page-links {
  clear: both;
  margin: 0 0 1.5em;
}

fieldset {
  width: 50%;
  margin: 0 auto;
}

fieldset legend {
  text-align: center;
}

fieldset label {
  width: 80%;
}

.single {
  /* not displaying ajax navigation on single post */
}

.single .site-main {
  padding: 0 5%;
}

.single .ias-trigger {
  display: none !important;
}

.single iframe {
  width: 100%;
}

.single .all-posts-link {
  padding: 5px 15px;
  text-align: center;
  background: #e4edf2;
  margin-top: 10px;
}

.single .all-posts-link a {
  color: rgba(0, 0, 0, 0.6);
  text-transform: uppercase;
}

.single .all-posts-link a:hover, .single .all-posts-link a:active, .single .all-posts-link a:focus {
  color: #144259;
}

/*
  Styles ofr the Search Form in the header
*/
.searchbox {
  left: 50%;
  top: 50%;
  bottom: auto;
  right: auto;
  -webkit-transform: translateX(-50%) translateY(-50%);
          transform: translateX(-50%) translateY(-50%);
  background: #144259;
  position: absolute;
  right: 24.046875px;
  width: 0;
  min-width: 35px;
  height: 35px;
  overflow: hidden;
  -webkit-transition: width 0.3s ease;
  transition: width 0.3s ease;
  -webkit-backface-visibility: hidden;
}

@media all and (min-width: 48em) {
  .searchbox {
    right: 100px;
  }
}

.search-input {
  position: absolute;
  top: 0;
  right: 0;
  border: 0;
  outline: none;
  background: transparent;
  width: 90%;
  height: 25px;
  margin: 0;
  padding: 5px 10px;
  font-family: inherit;
  font-size: inherit;
  color: transparent;
}

.search-input.placeholder {
  font-size: 11px;
  font-size: 0.6875rem;
  font-weight: 700;
  color: transparent;
  text-transform: uppercase;
}

.search-input:-moz-placeholder {
  font-size: 11px;
  font-size: 0.6875rem;
  font-weight: 700;
  color: transparent;
  text-transform: uppercase;
}

.search-input::-moz-placeholder {
  font-size: 11px;
  font-size: 0.6875rem;
  font-weight: 700;
  color: transparent;
  text-transform: uppercase;
}

.search-input:-ms-input-placeholder {
  font-size: 11px;
  font-size: 0.6875rem;
  font-weight: 700;
  color: transparent;
  text-transform: uppercase;
}

.search-input::-webkit-input-placeholder {
  font-size: 11px;
  font-size: 0.6875rem;
  font-weight: 700;
  color: transparent;
  text-transform: uppercase;
}

input[type="search"] .search-input {
  -webkit-appearance: none;
  border-radius: 0;
}

.icon-search,
.search-submit {
  width: 25px;
  height: 25px;
  display: block;
  position: absolute;
  right: 0;
  top: 5px;
  padding: 0;
  margin: 0;
  line-height: 25px;
  text-align: center;
  cursor: pointer;
  color: #fff;
}

.search-submit {
  background: #fff;
  background: rgba(255, 255, 255, 0);
  background-image: url(img/sprites.png);
  background-position: 0px 0px;
  width: 24px;
  height: 24px;
  color: transparent;
  border: 0;
  outline: none;
}

.search-submit:hover, .search-submit:active, .search-submit:focus {
  opacity: 1;
}

.icon-search {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-image: url(img/sprites.png);
  background-position: 0px 0px;
  width: 24px;
  height: 24px;
  color: #fff;
  background: transparent;
  font-size: inherit;
  font-family: "Roboto", sans-serif;
  speak: none;
  font-style: normal;
  font-weight: 400;
  font-variant: normal;
  text-transform: none;
  opacity: 0.7;
  -webkit-transition: opacity 0.3s ease;
  transition: opacity 0.3s ease;
  z-index: 1;
  /*  
  &:before {
    @include sprite($search);
    content: '';
    display: block;
  }
  */
}

.icon-search:hover, .icon-search:active, .icon-search:focus {
  opacity: 1;
}

.searchbox-open,
.no-js .searchbox {
  width: 54%;
  border: none;
  border-bottom: 1px solid rgba(255, 255, 255, 0.9);
  -webkit-transition: width 0.3s ease;
  transition: width 0.3s ease;
}

@media all and (min-width: 35.5em) {
  .searchbox-open,
  .no-js .searchbox {
    width: 25%;
  }
}

@media all and (min-width: 64em) {
  .searchbox-open,
  .no-js .searchbox {
    width: 15%;
  }
}

.searchbox-open .search-input,
.no-js .searchbox .search-input {
  color: #fff;
}

.searchbox-open .search-input.placeholder,
.no-js .searchbox .search-input.placeholder {
  color: rgba(255, 255, 255, 0.9);
  padding-top: 5px;
}

.searchbox-open .search-input:-moz-placeholder,
.no-js .searchbox .search-input:-moz-placeholder {
  color: rgba(255, 255, 255, 0.9);
  padding-top: 5px;
}

.searchbox-open .search-input::-moz-placeholder,
.no-js .searchbox .search-input::-moz-placeholder {
  color: rgba(255, 255, 255, 0.9);
  padding-top: 5px;
}

.searchbox-open .search-input:-ms-input-placeholder,
.no-js .searchbox .search-input:-ms-input-placeholder {
  color: rgba(255, 255, 255, 0.9);
  padding-top: 5px;
}

.searchbox-open .search-input::-webkit-input-placeholder,
.no-js .searchbox .search-input::-webkit-input-placeholder {
  color: rgba(255, 255, 255, 0.9);
  padding-top: 5px;
}

/*.search.search-open .search-input,
.no-js .search .search-input {
  @include placeholder {
    color: $color__text-input;
  }
}

.search.search-open .icon-search,
.no-js .search .icon-search {
  opacity: 1;
  z-index: 11;
}

.search.search-open .search-submit,
.no-js .search .search-submit {
  z-index: 90;
}*/
/*
    slider styles
*/
.unslider {
  overflow: visible;
  margin: 0;
  padding: 0;
}

.unslider-wrap {
  position: relative;
}

.unslider-wrap.unslider-carousel > li {
  float: left;
}

.unslider-vertical > ul {
  height: 100%;
}

.unslider-vertical li {
  float: none;
  width: 100%;
}

.unslider-fade {
  position: relative;
  overflow: visible !important;
}

.unslider-fade .unslider-wrap li {
  position: absolute;
  left: 0;
  top: 0;
  right: 0;
  z-index: 8;
}

.unslider-fade .unslider-wrap li.unslider-active {
  z-index: 1;
}

.unslider li,
.unslider ol,
.unslider ul {
  list-style: none;
  margin: 0;
  padding: 0;
  border: none;
  position: relative;
}

.unslider-arrow {
  position: absolute;
  left: 20px;
  z-index: 2;
  cursor: pointer;
}

.unslider-arrow.next {
  left: auto;
  right: 20px;
}

.unslider-nav ol {
  list-style: none;
  text-align: center;
}

.unslider-nav ol li {
  display: inline-block;
  width: 6px;
  height: 6px;
  margin: 0 4px;
  background: transparent;
  border-radius: 5px;
  overflow: hidden;
  text-indent: -999em;
  border: 2px solid #fff;
  cursor: pointer;
}

.unslider-nav ol li.unslider-active {
  background: #fff;
  cursor: default;
}

table {
  margin: 0 0 1.5em;
  width: 100%;
}

.widget {
  margin: 0;
}

.widget select {
  max-width: 100%;
}

.widget-title {
  font-size: 14px;
  font-size: 0.875rem;
  font-weight: 700;
  color: rgba(255, 255, 255, 0.9);
  margin-bottom: 5px;
}

fieldset .widget-title {
  font-size: 16px;
  font-size: 1rem;
  color: rgba(0, 0, 0, 0.6);
  font-weight: 400;
}

/* Search widget. */
.widget_search .search-submit {
  display: none;
}

@media print {
  * {
    background: transparent !important;
    color: #000 !important;
    box-shadow: none !important;
    text-shadow: none !important;
  }
  a,
  a:visited {
    text-decoration: underline;
  }
  a[href]:after {
    content: " (" attr(href) ")";
  }
  abbr[title]:after {
    content: " (" attr(title) ")";
  }
  .ir a:after,
  a[href^="javascript:"]:after,
  a[href^="#"]:after {
    content: "";
  }
  pre,
  blockquote {
    border: 1px solid #999;
    page-break-inside: avoid;
  }
  thead {
    display: table-header-group;
  }
  tr,
  img {
    page-break-inside: avoid;
  }
  img {
    max-width: 100% !important;
  }
  @page {
    margin: 0.5cm;
  }
  p,
  h2,
  h3 {
    orphans: 3;
    widows: 3;
  }
  h2,
  h3 {
    page-break-after: avoid;
  }
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
